// https://github.com/bintray/gradle-bintray-plugin
apply plugin: 'com.jfrog.bintray'
// https://github.com/dcendents/android-maven-gradle-plugin
apply plugin: 'com.github.dcendents.android-maven'

//very important for uploading pom file
project.group = PROJECT_GROUP

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

def bintrayUser = properties.getProperty("bintray.user")
def bintrayApiKey = properties.getProperty("bintray.apikey")
def bintrayGpgPassword = properties.getProperty("bintray.gpg.password")

def sonatypeUser = properties.getProperty("sonatype.user")
def sonatypePassword = properties.getProperty("sonatype.password")

def developerId = properties.getProperty("developer.id")
def developerName = properties.getProperty("developer.name")
def developerEmail = properties.getProperty("developer.email")

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// javadoc configuration
javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version PROJECT_VERSION
        links "http://docs.oracle.com/javase/7/docs/api"
        title PROJECT_NAME
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

install {
    repositories.mavenInstaller {
        pom.project {
            name PROJECT_NAME
            description PROJECT_DESCRIPTION
            url PROJECT_WEBSITE_URL
            inceptionYear '2016'

            packaging PROJECT_PACKAGING
            groupId PROJECT_GROUP
            artifactId PROJECT_NAME
            version PROJECT_VERSION

            licenses {
                license {
                    name PROJECT_LICENSE_NAME
                    url PROJECT_LICENSE_URL
                    distribution 'repo'
                }
            }
            scm {
                connection PROJECT_VCS_URL
                url PROJECT_WEBSITE_URL
            }
            developers {
                developer {
                    id developerId
                    name developerName
                    email developerEmail
                }
            }
        }
    }
}

bintray {
    user = bintrayUser
    key = bintrayApiKey

    configurations = ['archives'] //When uploading configuration files
    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = false //[Default: false] Whether to override version artifacts already published
    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
    pkg {
        repo = 'maven'
        name = PROJECT_NAME
        userOrg = developerId
        //An optional organization name when the repo belongs to one of the user's orgs
        desc = PROJECT_DESCRIPTION
        websiteUrl = PROJECT_WEBSITE_URL
        issueTrackerUrl = PROJECT_ISSUE_TRACKER_URL
        vcsUrl = PROJECT_VCS_URL
        licenses = ['Apache-2.0']
        labels = ['Android', 'Logger', 'Log', 'ANR', 'Crash']
        publicDownloadNumbers = true

        githubRepo = 'savio-zc/Android-Logger' //Optional Github repository
        githubReleaseNotesFile = 'README.md' //Optional Github readme file

        //Optional version descriptor
        version {
            name = PROJECT_VERSION //Bintray logical version name
            desc = PROJECT_VERSION_DESCRIPTION //Optional - Version-specific description
            released = new Date()
            //Optional - Date of the version release. 2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
            vcsTag = PROJECT_VERSION
            //Optional configuration for GPG signing
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = bintrayGpgPassword //Optional. The passphrase for GPG signing
            }
            //Optional configuration for Maven Central sync of the version
            mavenCentralSync {
                sync = true
                //[Default: true] Determines whether to sync the version to Maven Central.
                user = sonatypeUser //OSS user token: mandatory
                password = sonatypePassword //OSS user password: mandatory
                close = '1'
                //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
}